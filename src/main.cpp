#include <Arduino.h>
#include <DHT.h>
#include <BLEDevice.h>
#include <BLEServer.h>
#include <BLEUtils.h>
#include <BLE2902.h>

// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡∏≤‡∏£‡∏µ‡πÄ‡∏•‡∏¢‡πå‡πÅ‡∏•‡∏∞‡πÄ‡∏ã‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå
const int relay1Pin = 22;
const int relay2Pin = 23;
#define DHTPIN 16
#define DHTTYPE DHT22
#define MQ2PIN 34
#define BUZZER_PIN 21
#define SWITCH1 19
#define SWITCH2 18
#define SWITCH3 5
#define SWITCH4 17

DHT dht(DHTPIN, DHTTYPE);
bool systemActive = false;

BLEServer *pServer = NULL;
BLECharacteristic *pCharacteristic;
BLECharacteristic *sensorCharacteristic;
bool deviceConnected = false;
unsigned long lastDHTReadTime = 0;
const long DHTReadInterval = 2000;

#define TEMP_THRESHOLD 60.0
#define MQ2_THRESHOLD 2000
#define SERVICE_UUID "12345678-1234-5678-1234-56789abcdef0"
#define CHARACTERISTIC_UUID "abcd1234-5678-1234-5678-abcdef123456"
#define SENSOR_CHARACTERISTIC_UUID "1234abcd-5678-1234-5678-abcdef654321"

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏Å‡∏î‡∏Ñ‡∏£‡∏ö 4 ‡∏õ‡∏∏‡πà‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
bool isAllSwitchPressed() {
    return digitalRead(SWITCH1) == LOW &&
           digitalRead(SWITCH2) == LOW &&
           digitalRead(SWITCH3) == LOW &&
           digitalRead(SWITCH4) == LOW;
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏Ñ‡∏£‡∏ö 4 ‡∏õ‡∏∏‡πà‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
bool isAllSwitchReleased() {
    return digitalRead(SWITCH1) == HIGH &&
           digitalRead(SWITCH2) == HIGH &&
           digitalRead(SWITCH3) == HIGH &&
           digitalRead(SWITCH4) == HIGH;
}

// BLE Callbacks
class MyServerCallbacks : public BLEServerCallbacks {
    void onConnect(BLEServer* pServer) { deviceConnected = true; }
    void onDisconnect(BLEServer* pServer) {
        deviceConnected = false;
        pServer->startAdvertising();
    }
};

class MyCallbacks : public BLECharacteristicCallbacks {
    void onWrite(BLECharacteristic *pCharacteristic) {
        std::string value = pCharacteristic->getValue();
        if (value.length() > 0) {
            String command = String(value.c_str());
            Serial.print("üì© ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö: ");
            Serial.println(command);

            if (command == "ON1") {
                digitalWrite(relay1Pin, HIGH);
                Serial.println("‚úÖ ‡∏£‡∏µ‡πÄ‡∏•‡∏¢‡πå 1 ‡πÄ‡∏õ‡∏¥‡∏î");
            } else if (command == "OFF1") {
                digitalWrite(relay1Pin, LOW);
                Serial.println("‚úÖ ‡∏£‡∏µ‡πÄ‡∏•‡∏¢‡πå 1 ‡∏õ‡∏¥‡∏î");
            } else if (command == "ON2") {
                digitalWrite(relay2Pin, HIGH);
                Serial.println("‚úÖ ‡∏£‡∏µ‡πÄ‡∏•‡∏¢‡πå 2 ‡πÄ‡∏õ‡∏¥‡∏î");
            } else if (command == "OFF2") {
                digitalWrite(relay2Pin, LOW);
                Serial.println("‚úÖ ‡∏£‡∏µ‡πÄ‡∏•‡∏¢‡πå 2 ‡∏õ‡∏¥‡∏î");
            }
        }
    }
};

void setup() {
    Serial.begin(9600);

    pinMode(relay1Pin, OUTPUT_OPEN_DRAIN);
    pinMode(relay2Pin, OUTPUT_OPEN_DRAIN);
    pinMode(BUZZER_PIN, OUTPUT);
    pinMode(SWITCH1, INPUT_PULLUP);
    pinMode(SWITCH2, INPUT_PULLUP);
    pinMode(SWITCH3, INPUT_PULLUP);
    pinMode(SWITCH4, INPUT_PULLUP);

    digitalWrite(relay1Pin, LOW);
    digitalWrite(relay2Pin, LOW);
    digitalWrite(BUZZER_PIN, LOW);
    dht.begin();
}

void startSystem() {
    systemActive = true;
    Serial.println("‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô!");

    BLEDevice::init("ESP32_BLE_Sofa");
    pServer = BLEDevice::createServer();
    pServer->setCallbacks(new MyServerCallbacks());

    BLEService *pService = pServer->createService(SERVICE_UUID);
    pCharacteristic = pService->createCharacteristic(
                      CHARACTERISTIC_UUID,
                      BLECharacteristic::PROPERTY_WRITE
                    );
    pCharacteristic->setCallbacks(new MyCallbacks());

    sensorCharacteristic = pService->createCharacteristic(
                           SENSOR_CHARACTERISTIC_UUID,
                           BLECharacteristic::PROPERTY_READ | BLECharacteristic::PROPERTY_NOTIFY
                         );
    sensorCharacteristic->addDescriptor(new BLE2902());

    pService->start();
    pServer->getAdvertising()->start();
    Serial.println("‚úÖ BLE ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô");
}

void stopSystem() {
    Serial.println("üõë ‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô!");
    systemActive = false;
    
    BLEDevice::deinit();
    digitalWrite(relay1Pin, LOW);
    digitalWrite(relay2Pin, LOW);
    digitalWrite(BUZZER_PIN, LOW);
}

void loop() {
    // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö ‡πÅ‡∏•‡∏∞‡∏Å‡∏î‡∏Ñ‡∏£‡∏ö 4 ‡∏õ‡∏∏‡πà‡∏° -> ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö
    if (!systemActive && isAllSwitchPressed()) {
        startSystem();
    }

    // ‡∏ñ‡πâ‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà ‡πÅ‡∏•‡∏∞‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏Ñ‡∏£‡∏ö 4 ‡∏õ‡∏∏‡πà‡∏° -> ‡∏´‡∏¢‡∏∏‡∏î‡∏£‡∏∞‡∏ö‡∏ö
    if (systemActive && isAllSwitchReleased()) {
        stopSystem();
    }

    // ‡∏ñ‡πâ‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£‡∏ï‡πà‡∏≠
    if (!systemActive) return;

    // ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏ó‡∏∏‡∏Å‡πÜ 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    if (millis() - lastDHTReadTime >= DHTReadInterval) {
        lastDHTReadTime = millis();
        float temperature = dht.readTemperature();
        float humidity = dht.readHumidity();
        int mq2_value = analogRead(MQ2PIN);

        if (!isnan(temperature) && !isnan(humidity)) {
            String sensorData = String(temperature) + "," + String(humidity) + "," + String(mq2_value);
            sensorCharacteristic->setValue(sensorData.c_str());
            sensorCharacteristic->notify();
            Serial.println("üì° ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: " + sensorData);

            // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
            if (temperature > TEMP_THRESHOLD || mq2_value > MQ2_THRESHOLD) {
                digitalWrite(BUZZER_PIN, HIGH);
                Serial.println("‚ùó‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô! ‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡πà‡∏≤‡∏Å‡πä‡∏≤‡∏ã‡πÄ‡∏Å‡∏¥‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå!");
            } else {
                digitalWrite(BUZZER_PIN, LOW);
            }
        } else {
            Serial.println("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤ DHT22 ‡πÑ‡∏î‡πâ!");
        }
    }
}
